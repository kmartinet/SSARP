[{"path":"https://kmartinet.github.io/SSARP/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to SSARP","title":"Contributing to SSARP","text":"Thank considering contributing SSARP! following guidelines created editing CONTRIBUTING.md file created usethis::use_tidy_contributing().","code":""},{"path":"https://kmartinet.github.io/SSARP/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to SSARP","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment second line.","code":""},{"path":"https://kmartinet.github.io/SSARP/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to SSARP","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See tidyverse’s guide create great issue advice.","code":""},{"path":"https://kmartinet.github.io/SSARP/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to SSARP","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"kmartinet/SSARP\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check fails error, ’s good idea ask help continuing. Warnings non-ASCII strings island_areas object files vignettes subdirectory can safely ignored. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number.","code":""},{"path":"https://kmartinet.github.io/SSARP/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to SSARP","text":"Please restyle code nothing PR. New code follow tidyverse style guide, one exception: please use camelCase new function names, create alias snake_case camelCase work function call. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://kmartinet.github.io/SSARP/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to SSARP","text":"Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://kmartinet.github.io/SSARP/articles/Create_SAR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Construct a Species-Area Relationship with SSARP","text":"species-area relationship (SAR) visualizes relationship species richness (number species) area land mass species live. observation species richness increases increasing area fundamental law ecology, disruption relationship may associated habitat loss, habitat fragmentation, increasing numbers non-native species. Creating SARs island-dwelling species helps researchers understand trends biodiversity across archipelagos changing due effects. goal vignette use SSARP R package create SAR Anolis, well-studied genus lizards. focus Anolis occurrence records Caribbean Islands. information SSARP package comparison previously published SAR Anolis can found manuscript associated package. order construct species-area relationship SSARP, : Gather occurrence data GBIF Filter invalid occurrence records Find areas pertinent land masses Create species-area relationship","code":""},{"path":"https://kmartinet.github.io/SSARP/articles/Create_SAR.html","id":"gathering-occurrence-data","dir":"Articles","previous_headings":"","what":"Gathering Occurrence Data","title":"Construct a Species-Area Relationship with SSARP","text":"GBIF (Global Biodiversity Information Facility) provides easy method gathering occurrence data taxa interest. SSARP uses functions rgbif package gather occurrence records associated given taxon. user may also provide data use creating SAR, use GBIF example. order access data GBIF, must first determine unique identifying key associated taxon interest. use SSARP::get_key() function SSARP obtain key. Now key associated Anolis, use key SSARP::get_data() function gather georeferenced occurrence records GBIF. “limit” parameter set 10000 case quick illustration SSARP’s functionality, parameter can large 100,000 (hard limit rgbif number records returned). interested occurrence records island-dwelling anole lizards located Caribbean, geographically restrict returned data area setting “geometry” parameter polygon Well Known Text (WKT) format encompasses Caribbean islands (Figure 1).","code":"library(SSARP)  # Get the GBIF key for the Anolis genus key <- get_key(query = \"Anolis\", rank = \"genus\")  # Print key key ## [1] 8782549 # Get data for Anolis from GBIF in the specified polygon dat <- get_data(key = key, limit = 10000, geometry = 'POLYGON((-84.8 23.9, -84.7 16.4, -65.2 13.9, -63.1 11.0, -56.9 15.5, -60.5 21.9, -79.3 27.8, -79.8 24.8, -84.8 23.9))')  # Print first 5 lines of dat head(dat, n = 5) ## # A tibble: 5 × 155 ##   key        scientificName        decimalLatitude decimalLongitude issues datasetKey publishingOrgKey installationKey ##   <chr>      <chr>                           <dbl>            <dbl> <chr>  <chr>      <chr>            <chr>           ## 1 5007064248 Anolis distichus Cop…            19.0            -69.0 cdc,c… 50c9509d-… 28eb1a3f-1c15-4… 997448a8-f762-… ## 2 5007082681 Anolis evermanni Ste…            18.3            -66.3 cdc,c… 50c9509d-… 28eb1a3f-1c15-4… 997448a8-f762-… ## 3 5007565800 Anolis cristatellus …            18.4            -66.0 cdc,c… 50c9509d-… 28eb1a3f-1c15-4… 997448a8-f762-… ## 4 5008127474 Anolis sagrei Duméri…            18.4            -64.5 cdc,c… 50c9509d-… 28eb1a3f-1c15-4… 997448a8-f762-… ## 5 5037019266 Anolis leachii Dumér…            17.1            -61.8 cdc,c… 50c9509d-… 28eb1a3f-1c15-4… 997448a8-f762-… ## # ℹ 147 more variables: hostingOrganizationKey <chr>, publishingCountry <chr>, protocol <chr>, lastCrawled <chr>, ## #   lastParsed <chr>, crawlId <int>, basisOfRecord <chr>, occurrenceStatus <chr>, taxonKey <int>, kingdomKey <int>, ## #   phylumKey <int>, classKey <int>, familyKey <int>, genusKey <int>, speciesKey <int>, acceptedTaxonKey <int>, ## #   acceptedScientificName <chr>, kingdom <chr>, phylum <chr>, family <chr>, genus <chr>, species <chr>, ## #   genericName <chr>, specificEpithet <chr>, taxonRank <chr>, taxonomicStatus <chr>, iucnRedListCategory <chr>, ## #   dateIdentified <chr>, coordinateUncertaintyInMeters <dbl>, continent <chr>, stateProvince <chr>, year <int>, ## #   month <int>, day <int>, eventDate <chr>, startDayOfYear <int>, endDayOfYear <int>, modified <chr>, …"},{"path":"https://kmartinet.github.io/SSARP/articles/Create_SAR.html","id":"finding-land-mass-names-and-areas","dir":"Articles","previous_headings":"","what":"Finding Land Mass Names and Areas","title":"Construct a Species-Area Relationship with SSARP","text":"occurrence data returned, use occurrence record’s GPS point determine land mass species found find area associated land mass using database island areas names SSARP. locality information split across three columns: “First,” “Second,” “Third.” mapping utilities SSARP uses sometimes output different levels specificity locality information (three different levels), columns provide space different levels. island name interested last filled-column three. example, two columns locality information given occurrence record, island name second. one column locality information, contain island name (Puerto Rico Antigua ). columns NA, occurrence record invalid filtered next step. Now determined names land masses associated occurrence record, find area associated land mass. Now, occurrence record dataframe includes records GPS points associated land mass, along areas land masses (m^2). SSARP::remove_continents() function removes continental occurrence records, useful user interested island-dwelling species (example). data obtained using SSARP::get_data() function geographically restricted, potential user error specifying polygon WKT format often leads accidental continental records removed using function.","code":"# Find land mass names land_dat <- find_land(occurrences = dat)  # Print first 5 lines of land_dat head(land_dat, n = 5) ##                                  SpeciesName  Genus      Species  Longitude  Latitude       First Second Third ## 1                Anolis distichus Cope, 1861 Anolis    distichus -69.010239 19.015033        <NA>   <NA>  <NA> ## 2           Anolis evermanni Stejneger, 1904 Anolis    evermanni -66.314592  18.29657 Puerto Rico   <NA>  <NA> ## 3 Anolis cristatellus Duméril & Bibron, 1837 Anolis cristatellus -65.957558 18.396785 Puerto Rico   <NA>  <NA> ## 4       Anolis sagrei Duméril & Bibron, 1837 Anolis       sagrei -64.512895 18.384578        <NA>   <NA>  <NA> ## 5      Anolis leachii Duméril & Bibron, 1837 Anolis      leachii -61.847698 17.118499     Antigua   <NA>  <NA> ##                             datasetKey ## 1 50c9509d-22c7-4a22-a47d-8c48425ef4a7 ## 2 50c9509d-22c7-4a22-a47d-8c48425ef4a7 ## 3 50c9509d-22c7-4a22-a47d-8c48425ef4a7 ## 4 50c9509d-22c7-4a22-a47d-8c48425ef4a7 ## 5 50c9509d-22c7-4a22-a47d-8c48425ef4a7 # Use the land mass names to get their areas area_dat <- find_areas(occs = land_dat)  # Print first 5 lines of area_dat head(area_dat, n = 5) ##                                  SpeciesName  Genus      Species  Longitude  Latitude       First Second Third ## 2           Anolis evermanni Stejneger, 1904 Anolis    evermanni -66.314592  18.29657 Puerto Rico   <NA>  <NA> ## 3 Anolis cristatellus Duméril & Bibron, 1837 Anolis cristatellus -65.957558 18.396785 Puerto Rico   <NA>  <NA> ## 5      Anolis leachii Duméril & Bibron, 1837 Anolis      leachii -61.847698 17.118499     Antigua   <NA>  <NA> ## 6      Anolis leachii Duméril & Bibron, 1837 Anolis      leachii -61.845561 17.121707     Antigua   <NA>  <NA> ## 7                  Anolis grahami Gray, 1845 Anolis      grahami -77.060327  18.39293     Jamaica   <NA>  <NA> ##                             datasetKey       areas ## 2 50c9509d-22c7-4a22-a47d-8c48425ef4a7  9710687500 ## 3 50c9509d-22c7-4a22-a47d-8c48425ef4a7  9710687500 ## 5 50c9509d-22c7-4a22-a47d-8c48425ef4a7   301187500 ## 6 50c9509d-22c7-4a22-a47d-8c48425ef4a7   301187500 ## 7 50c9509d-22c7-4a22-a47d-8c48425ef4a7 12225750000 nocont_dat <- remove_continents(occs = area_dat)"},{"path":"https://kmartinet.github.io/SSARP/articles/Create_SAR.html","id":"create-species-area-relationship","dir":"Articles","previous_headings":"","what":"Create Species-Area Relationship","title":"Construct a Species-Area Relationship with SSARP","text":"Finally, generate SAR using SSARP::create_SAR function. SSARP::create_SAR() function creates multiple regression objects breakpoints user-specified “npsi” parameter. example, “npsi” two, SSARP::create_SAR() generate regression objects zero (linear regression), one, two breakpoints. function return regression object lowest AIC score. “npsi” parameter set one example. Note linear regression (zero breakpoints) better-supported segmented regression one breakpoint, linear regression returned instead. SSARP::create_SAR() function also output summary best-fit model data (displayed ).","code":"create_SAR(occurrences = nocont_dat, npsi = 1) ##  ***Regression Model with Segmented Relationship(s)*** ## ## Call:  ## segmented.lm(obj = linear, seg.Z = ~x, npsi = 1, control = seg.control(display = FALSE)) ##  ## Estimated Break-Point(s): ##           Est. St.Err ## psi1.x 21.977   0.75 ##  ## Coefficients of the linear terms: ##             Estimate Std. Error t value Pr(>|t|)   ## (Intercept) -1.03529    1.00142  -1.034   0.3090   ## x            0.09608    0.05355   1.794   0.0822 . ## U1.x         0.67880    0.21273   3.191       NA   ## --- ## Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 ##  ## Residual standard error: 0.5573 on 32 degrees of freedom ## Multiple R-Squared: 0.6611,  Adjusted R-squared: 0.6294  ##  ## Boot restarting based on 8 samples. Last fit: ## Convergence attained in 2 iterations (rel. change 5.2078e-11)"},{"path":"https://kmartinet.github.io/SSARP/articles/Create_SpAR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Construct a Speciation-Area Relationship with SSARP","text":"speciation-area relationship (SpAR) plots speciation rates area island associated species live. vignette, covers create SpAR using SSARP package, uses knowledge data generated vignette describing creation species-area relationships. Code relevant generating necessary data SpAR example species-area relationship (SAR) vignette included , reader encouraged read SAR vignette additional details. vignette, create SpAR lizard genus Anolis, continuation SAR vignette.","code":""},{"path":"https://kmartinet.github.io/SSARP/articles/Create_SpAR.html","id":"generate-occurrence-data","dir":"Articles","previous_headings":"","what":"Generate Occurrence Data","title":"Construct a Speciation-Area Relationship with SSARP","text":"First, generate “nocont_dat” object SAR vignette, includes occurrence records associated island names areas Anolis lizards live Caribbean islands.","code":"library(SSARP)  # Get the GBIF key for the Anolis genus key <- get_key(query = \"Anolis\", rank = \"genus\")  # Get data for Anolis from GBIF from islands in the Caribbean dat <- get_data(key = key, limit = 10000, geometry = 'POLYGON((-84.8 23.9, -84.7 16.4, -65.2 13.9, -63.1 11.0, -56.9 15.5, -60.5 21.9, -79.3 27.8, -79.8 24.8, -84.8 23.9))')  # Find land mass names land_dat <- find_land(occurrences = dat)  # Use the land mass names to get their areas area_dat <- find_areas(occs = land_dat)  # Remove continents from the filtered occurrence record dataset nocont_dat <- remove_continents(occs = area_dat)"},{"path":"https://kmartinet.github.io/SSARP/articles/Create_SpAR.html","id":"calculate-speciation-rates","dir":"Articles","previous_headings":"","what":"Calculate Speciation Rates","title":"Construct a Speciation-Area Relationship with SSARP","text":"“nocont_dat” object created can used phylogenetic tree create SpAR. step SSARP workflow enables user determine whether breakpoint SAR corresponds threshold island size situ speciation occurs (see Losos Schluter 2000). phylogenetic tree Anolis use example trimmed version tree used Patton et al. (2021). trimmed tree includes anoles found islands Caribbean. order read tree, must use ape R package. Now phylogenetic tree, can estimate tip speciation rates use speciation-area relationship. SSARP includes three methods estimating tip speciation rates: BAMM (Rabosky 2014), lambda calculation crown groups Magallόn Sanderson (2001), DR (Jetz et al. 2012). example, use lambda calculation crown groups Magallόn Sanderson (2001) SSARP::estimate_MS() function. “label_type” parameter function tells SSARP whether tip labels given tree include full species name (binomial) just specific epithet (epithet). “speciation_occurrences” object dataframe containing island areas corresponding speciation rate estimated SSARP::estimate_MS() function.","code":"library(ape) tree <- read.tree(system.file(\"extdata\",                                \"Patton_Anolis_trimmed.tree\",                                package = \"SSARP\")) # Calculate tip speciation rates using the lambda calculation for crown groups from Magallόn and Sanderson (2001) speciation_occurrences <- estimate_MS(tree = tree, label_type = \"epithet\", occurrences = nocont_dat)"},{"path":"https://kmartinet.github.io/SSARP/articles/Create_SpAR.html","id":"create-speciation-area-relationship","dir":"Articles","previous_headings":"","what":"Create Speciation-Area Relationship","title":"Construct a Speciation-Area Relationship with SSARP","text":"Next, use “speciation_occurrences” object SSARP::create_SpAR() function create SpAR. Just like SSARP::create_SAR() function, SSARP::create_SpAR() function creates multiple regression objects breakpoints user-specified “npsi” parameter. example, “npsi” two, SSARP::create_SpAR() generate regression objects zero (linear regression), one, two breakpoints. function return regression object lowest AIC score. “npsi” parameter set one example. Note linear regression (zero breakpoints) better-supported segmented regression one breakpoint, linear regression returned instead. notice two largest islands speciation rate zero example. likely occurred calculation speciation rate Magallόn Sanderson (2001) SSARP::estimate_MS() uses based monophyly, can disrupted islands non-native species occurrence records. using SSARP::estimate_MS() function estimate speciation rates SpAR, incredibly important manually filter returned occurrence records remove non-native species.","code":"create_SpAR(occurrences = speciation_occurrences, npsi = 1) ##  ##  ***Regression Model with Segmented Relationship(s)*** ##  ## Call:  ## segmented.lm(obj = linear, seg.Z = ~x, npsi = 1, control = seg.control(display = FALSE)) ##  ## Estimated Break-Point(s): ##           Est. St.Err ## psi1.x 19.924  1.036 ##  ## Coefficients of the linear terms: ##               Estimate Std. Error t value Pr(>|t|) ## (Intercept)  1.364e-12  2.233e-02   0.000        1 ## x           -8.298e-14  1.227e-03   0.000        1 ## U1.x         5.712e-03  2.150e-03   2.656       NA ##  ## Residual standard error: 0.01069 on 32 degrees of freedom ## Multiple R-Squared: 0.3968,  Adjusted R-squared: 0.3403  ##  ## Boot restarting based on 6 samples. Last fit: ## Convergence attained in 2 iterations (rel. change 2.5337e-14)"},{"path":"https://kmartinet.github.io/SSARP/articles/Create_SpAR.html","id":"literature-cited","dir":"Articles","previous_headings":"Create Speciation-Area Relationship","what":"Literature Cited","title":"Construct a Speciation-Area Relationship with SSARP","text":"Jetz, W., Thomas, G.H., Joy, J.B., Hartmann, K., & Mooers, .O. (2012). global diversity birds space time. Nature, 491: 444-448. Losos, J.B. & Schluter, D. (2000). Analysis evolutionary species-area relationship. Nature, 408: 847-850. Magallόn, S. & Sanderson, M.J. (2001). Absolute Diversification Rates Angiosperm Clades. Evolution, 55(9): 1762-1780. Patton, .H., Harmon, L.J., del Rosario Castañeda, M., Frank, H.K., Donihue, C.M., Herrel, ., & Losos, J.B. (2021). adaptive radiations collide: Different evolutionary trajectories within island mainland lizard clades. PNAS, 118(42): e2024451118. Rabosky, D.L. (2014). Automatic Detection Key Innovations, Rate Shifts, Diversity-Dependence Phylogenetic Trees. PLOS ONE, 9(2): e89543.","code":""},{"path":"https://kmartinet.github.io/SSARP/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kristen Martinet. Author, maintainer.","code":""},{"path":"https://kmartinet.github.io/SSARP/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Martinet KM, Román-Palacios C, Harmon LJ (2025). “SSARP: R Package Easily Creating Species- Speciation- Area Relationships Using Web Databases.” bioRxiv. doi:10.1101/2024.12.31.630948, https://www.biorxiv.org/content/10.1101/2024.12.31.630948v1.","code":"@Article{,   title = {SSARP: An R Package for Easily Creating Species- and Speciation- Area Relationships Using Web Databases},   author = {Kristen M. Martinet and Cristian Román-Palacios and Luke J. Harmon},   journal = {bioRxiv},   year = {2025},   doi = {https://doi.org/10.1101/2024.12.31.630948},   url = {https://www.biorxiv.org/content/10.1101/2024.12.31.630948v1}, }"},{"path":"https://kmartinet.github.io/SSARP/index.html","id":"ssarp","dir":"","previous_headings":"","what":"SSARP (Species-/Speciation-Area Relationship Projector)","title":"SSARP (Species-/Speciation-Area Relationship Projector)","text":"SSARP (Species-/Speciation-Area Relationship Projector) R package provides suite functions help users create speciation- species-area relationships island-dwelling taxa using occurrence data GBIF (Global Biodiversity Information Facility) accessed via GBIF’s API user’s occurrence data. Species- speciation-area relationships useful determining whether biodiversity distributed unusual way given island system (e.g., species richness decreasing islands get larger instead increasing). unusual trend relationships may indicative habitat loss negative impact non-native species. Please find bioRxiv preprint manuscript associated SSARP !","code":""},{"path":"https://kmartinet.github.io/SSARP/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"SSARP (Species-/Speciation-Area Relationship Projector)","text":"install SSARP, use “install_github” function devtools package:","code":"# install.packages(\"devtools\") library(devtools)  install_github(\"kmartinet/SSARP\")"},{"path":"https://kmartinet.github.io/SSARP/index.html","id":"example-creating-a-species-area-relationship","dir":"","previous_headings":"","what":"Example: Creating a Species-Area Relationship","title":"SSARP (Species-/Speciation-Area Relationship Projector)","text":"species-area relationship (SAR) visualizes relationship species richness (number species) area land mass species live. brief example covers SSARP workflow creating SAR, detailed explanations code methods can found Articles SSARP pkgdown website. order construct species-area relationship SSARP, : Gather occurrence data GBIF Filter invalid occurrence records Find areas pertinent land masses Create species-area relationship","code":""},{"path":"https://kmartinet.github.io/SSARP/index.html","id":"step-1-gather-occurrence-data-from-gbif","dir":"","previous_headings":"Example: Creating a Species-Area Relationship","what":"Step 1: Gather occurrence data from GBIF","title":"SSARP (Species-/Speciation-Area Relationship Projector)","text":"step, find unique identifying key associated taxon interest (lizard genus Anolis case) use key access occurrence points taxon GBIF. restrict returned occurrence records Caribbean islands using “geometry” parameter “getData” function. GBIF key Anolis 8782549. use key, along Well-Known Text (WKT) polygon around Caribbean islands, get data Anolis GBIF using “getData” function SSARP. “dat” dataframe includes first 10,000 records GBIF Anolis within specified polygon around Caribbean islands.","code":"library(SSARP)  # Get the GBIF key for the Anolis genus key <- getKey(query = \"Anolis\", rank = \"genus\")  # Print the key key #> [1] 8782549 # Get data for Anolis from GBIF in a specified polygon around Caribbean islands dat <- getData(key = key, limit = 10000,   geometry = 'POLYGON((-84.8 23.9, -84.7 16.4, -65.2 13.9, -63.1 11.0, -56.9 15.5, -60.5 21.9, -79.3 27.8, -79.8 24.8, -84.8 23.9))')  # Print the first 5 lines of dat head(dat, n = 5) #> # A tibble: 5 × 156 #>   key        scientificName   decimalLatitude decimalLongitude issues datasetKey #>   <chr>      <chr>                      <dbl>            <dbl> <chr>  <chr>      #> 1 5007064248 Anolis distichu…            19.0            -69.0 cdc,c… 50c9509d-… #> 2 5007082681 Anolis evermann…            18.3            -66.3 cdc,c… 50c9509d-… #> 3 5007565800 Anolis cristate…            18.4            -66.0 cdc,c… 50c9509d-… #> 4 5008127474 Anolis sagrei D…            18.4            -64.5 cdc,c… 50c9509d-… #> 5 5037019266 Anolis leachii …            17.1            -61.8 cdc,c… 50c9509d-… #> # ℹ 150 more variables: publishingOrgKey <chr>, installationKey <chr>, #> #   hostingOrganizationKey <chr>, publishingCountry <chr>, protocol <chr>, #> #   lastCrawled <chr>, lastParsed <chr>, crawlId <int>, basisOfRecord <chr>, #> #   occurrenceStatus <chr>, taxonKey <int>, kingdomKey <int>, phylumKey <int>, #> #   classKey <int>, familyKey <int>, genusKey <int>, speciesKey <int>, #> #   acceptedTaxonKey <int>, acceptedScientificName <chr>, kingdom <chr>, #> #   phylum <chr>, family <chr>, genus <chr>, species <chr>, …"},{"path":"https://kmartinet.github.io/SSARP/index.html","id":"step-2-filter-out-invalid-occurrence-records","dir":"","previous_headings":"Example: Creating a Species-Area Relationship","what":"Step 2: Filter out invalid occurrence records","title":"SSARP (Species-/Speciation-Area Relationship Projector)","text":"Now dataframe includes first 10,000 records Anolis within specified polygon around Caribbean islands, filter data include occurrence records land. occurrence records might GPS points ocean instead island, important exclude invalid records. “land_dat” dataframe filtered version “dat” dataframe created gathering data GBIF. “land_dat” dataframe includes occurrence records GPS points fall land mass, along locality information land mass. locality information split across three columns: “First,” “Second,” “Third.” mapping utilities SSARP uses sometimes output different levels specificity locality information (three different levels), columns provide space different levels. island name interested last filled-column three. example, two columns locality information given occurrence record, island name second. one column locality information, contain island name (Puerto Rico Antigua ). columns NA, occurrence record invalid filtered next step.","code":"# Find land mass names and exclude records not on land land_dat <- findLand(occurrences = dat)  # Print first 5 lines of land_dat head(land_dat, n = 5) #>                                  SpeciesName  Genus      Species  Longitude #> 1                Anolis distichus Cope, 1861 Anolis    distichus -69.010239 #> 2           Anolis evermanni Stejneger, 1904 Anolis    evermanni -66.314592 #> 3 Anolis cristatellus Duméril & Bibron, 1837 Anolis cristatellus -65.957558 #> 4       Anolis sagrei Duméril & Bibron, 1837 Anolis       sagrei -64.512895 #> 5      Anolis leachii Duméril & Bibron, 1837 Anolis      leachii -61.847698 #>    Latitude       First Second Third                           datasetKey #> 1 19.015033        <NA>   <NA>  <NA> 50c9509d-22c7-4a22-a47d-8c48425ef4a7 #> 2  18.29657 Puerto Rico   <NA>  <NA> 50c9509d-22c7-4a22-a47d-8c48425ef4a7 #> 3 18.396785 Puerto Rico   <NA>  <NA> 50c9509d-22c7-4a22-a47d-8c48425ef4a7 #> 4 18.384578        <NA>   <NA>  <NA> 50c9509d-22c7-4a22-a47d-8c48425ef4a7 #> 5 17.118499     Antigua   <NA>  <NA> 50c9509d-22c7-4a22-a47d-8c48425ef4a7"},{"path":"https://kmartinet.github.io/SSARP/index.html","id":"step-3-find-areas-of-pertinent-land-masses","dir":"","previous_headings":"Example: Creating a Species-Area Relationship","what":"Step 3: Find areas of pertinent land masses","title":"SSARP (Species-/Speciation-Area Relationship Projector)","text":"Next, use dataframe occurrence records associated land mass names (“land_dat” object created ) “findAreas” function find area land mass. “area_dat” dataframe includes records GPS points associated land mass, along areas land masses (m^2).","code":"# Use the land mass names to get their areas area_dat <- findAreas(occs = land_dat)  # Print the first 5 lines of area_dat head(area_dat, n = 5) #>                                  SpeciesName  Genus      Species  Longitude #> 2           Anolis evermanni Stejneger, 1904 Anolis    evermanni -66.314592 #> 3 Anolis cristatellus Duméril & Bibron, 1837 Anolis cristatellus -65.957558 #> 5      Anolis leachii Duméril & Bibron, 1837 Anolis      leachii -61.847698 #> 6      Anolis leachii Duméril & Bibron, 1837 Anolis      leachii -61.845561 #> 7                  Anolis grahami Gray, 1845 Anolis      grahami -77.060327 #>    Latitude       First Second Third                           datasetKey #> 2  18.29657 Puerto Rico   <NA>  <NA> 50c9509d-22c7-4a22-a47d-8c48425ef4a7 #> 3 18.396785 Puerto Rico   <NA>  <NA> 50c9509d-22c7-4a22-a47d-8c48425ef4a7 #> 5 17.118499     Antigua   <NA>  <NA> 50c9509d-22c7-4a22-a47d-8c48425ef4a7 #> 6 17.121707     Antigua   <NA>  <NA> 50c9509d-22c7-4a22-a47d-8c48425ef4a7 #> 7  18.39293     Jamaica   <NA>  <NA> 50c9509d-22c7-4a22-a47d-8c48425ef4a7 #>         areas #> 2  9710687500 #> 3  9710687500 #> 5   301187500 #> 6   301187500 #> 7 12225750000"},{"path":"https://kmartinet.github.io/SSARP/index.html","id":"step-4-create-the-species-area-relationship","dir":"","previous_headings":"Example: Creating a Species-Area Relationship","what":"Step 4: Create the species-area relationship","title":"SSARP (Species-/Speciation-Area Relationship Projector)","text":"Finally, generate SAR using “SARP” function. “SARP” function creates multiple regression objects breakpoints user-specified “npsi” parameter. example, “npsi” two, “SARP” generate regression objects zero (linear regression), one, two breakpoints. function return regression object lowest AIC score. “npsi” parameter set one example. Note linear regression (zero breakpoints) better-supported segmented regression one breakpoint, linear regression returned instead.  species-area relationship (SAR) Anolis including island-based occurrences within polygon around Caribbean islands first 10,000 records genus GBIF! best-fit model segmented regression one breakpoint. R console also output statistical information model.","code":"SARP(occurrences = area_dat, npsi = 1) #>  #>  ***Regression Model with Segmented Relationship(s)*** #>  #> Call:  #> segmented.lm(obj = linear, seg.Z = ~x, npsi = 1, control = seg.control(display = FALSE)) #>  #> Estimated Break-Point(s): #>           Est. St.Err #> psi1.x 22.021  0.712 #>  #> Coefficients of the linear terms: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept) -0.96715    0.99558  -0.971   0.3382   #> x            0.09202    0.05340   1.723   0.0939 . #> U1.x         0.70904    0.21351   3.321       NA   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.5596 on 34 degrees of freedom #> Multiple R-Squared: 0.6515,  Adjusted R-squared: 0.6207  #>  #> Boot restarting based on 6 samples. Last fit: #> Convergence attained in 2 iterations (rel. change 1.0388e-09)"},{"path":"https://kmartinet.github.io/SSARP/index.html","id":"workflow-summary-for-using-data-from-gbif-to-create-a-species-area-relationship-plot","dir":"","previous_headings":"Example: Creating a Species-Area Relationship","what":"Workflow Summary for using data from GBIF to create a species-area relationship plot","title":"SSARP (Species-/Speciation-Area Relationship Projector)","text":"Use getKey(query, rank) find unique identifying key associated taxon interest. Use getData(key, limit, geometry) key found Step 1 access limit occurrence points GBIF. hard limit 100,000 records call getData(), set rgbif. “geometry” parameter can specified well-known text (WKT) representation geometry restrict geographic location returned occurrence records (see WKT ). Use findLand(occ, fillgaps) dataframe obtained Step 2 figure names landmasses using occurrence record GPS points maps R package. Setting “fillgaps” parameter TRUE enable use Photon API fill missing landmass names left maps R package. Use findAreas(occ, area_custom) dataframe obtained Step 3 match landmass names dataset includes names islands planet areas. user like use custom island area dataset instead built-one, “area_custom” parameter can set name custom island area dataframe. 4a. ’d like include occurrence records islands, can remove continental records using removeContinents(occ) dataframe returned findAreas() Use SARP(occ, npsi) dataframe obtained Step 4 create species-area relationship plot reports information important associated regression. “npsi” parameter indicates maximum number breakpoints user like compare model selection. returned model plot correspond best-fit model.","code":""},{"path":"https://kmartinet.github.io/SSARP/index.html","id":"workflow-summary-for-using-data-from-gbif-and-a-user-provided-phylogenetic-tree-to-create-a-speciation-area-relationship-plot","dir":"","previous_headings":"Example: Creating a Species-Area Relationship","what":"Workflow summary for using data from GBIF and a user-provided phylogenetic tree to create a speciation-area relationship plot","title":"SSARP (Species-/Speciation-Area Relationship Projector)","text":"Use getKey(query, rank) find unique identifying key associated taxon interest. Use getData(key, limit, geometry) key found Step 1 access limit occurrence points GBIF. hard limit 100,000 records call getData(), set rgbif. “geometry” parameter can specified well-known text (WKT) representation geometry restrict geographic location returned occurrence records (see WKT ). Use findLand(occ, fillgaps) dataframe obtained Step 2 figure names landmasses using occurrence record GPS points maps R package. Setting “fillgaps” parameter TRUE enable use Photon API fill missing landmass names left maps R package. Use findAreas(occ, area_custom) dataframe obtained Step 3 match landmass names dataset includes names islands planet areas. user like use custom island area dataset instead built-one, “area_custom” parameter can set name custom island area dataframe. 4a. ’d like include occurrence records islands, can remove continental records using removeContinents(occ) dataframe returned findAreas() Use either speciationDR(tree, label_type, occ) speciationMS(tree, label_type, occ) phylogenetic tree corresponds taxa signified previous steps, classifier describes tip labels (whether tip labels simply species epithets full scientific names), dataframe obtained Step 4 add tip speciation rates using DR statistic (Jetz et al. 2012) lambda calculation crown groups Magallόn Sanderson (2001) respectively occurrence dataframe. user may also choose estimate tip speciation rates BAMM analysis (Rabosky 2014) using speciationBAMM(label_type, occ, edata) classifier describes tip labels (whether tip labels simply species epithets full scientific names), occurrence record dataframe obtained Step 4, bammdata object generated reading event data file BAMM analysis BAMMtools package (Rabosky et al. 2014). Use SpeARP(occ, npsi) dataframe obtained Step 5 create speciation-area relationship plot reports information important associated regression. “npsi” parameter indicates maximum number breakpoints user like compare model selection. returned model plot correspond best-fit model.","code":""},{"path":"https://kmartinet.github.io/SSARP/index.html","id":"some-helpful-notes-about-well-known-text-wkt-representation-of-geometry","dir":"","previous_headings":"Example: Creating a Species-Area Relationship","what":"Some helpful notes about well-known text (WKT) representation of geometry","title":"SSARP (Species-/Speciation-Area Relationship Projector)","text":"running getData(), user can specify well-known text (WKT) representation geometry restrict geographic location returned occurrence records. rgbif::occ_search function getData() calls requires counter-clockwise winding order WKT. find helpful think WKT polygons way: imagine square around geographic area interest pick one corners starting point. order points WKT format follow counter-clockwise corner picked first, final entry WKT string needs first entry. Additionally, GPS points typically represented “latitude, longitude” format, WKT expects “longitude latitude” format commas separating points rather individual longitude latitude values. WKT polygons can specified points included simple square example, even include polygons nested within others polygons holes middle.","code":""},{"path":"https://kmartinet.github.io/SSARP/index.html","id":"literature-cited","dir":"","previous_headings":"Example: Creating a Species-Area Relationship > Some helpful notes about well-known text (WKT) representation of geometry","what":"Literature Cited","title":"SSARP (Species-/Speciation-Area Relationship Projector)","text":"Jetz, W., Thomas, G.H, Joy, J.B., Harmann, K., & Mooers, .O. (2012). global diversity birds space time. Nature, 491: 444-448. Magallόn, S. & Sanderson, M.J. (2001). Absolute Diversification Rates Angiosperm Clades. Evolution, 55(9): 1762-1780. Rabosky, D.L. (2014). Automatic Detection Key Innovations, Rate Shifts, Diversity-Dependence Phylogenetic Trees. PLOS ONE, 9(2): e89543.436 Rabosky, D.L., Grundler, M., Anderson, C., Title, P., Shi, J.J., Brown, J.W., Huang, H., & Larson, J.G. (2014). BAMMtools: R package analysis evolutionary dynamics phylogenetic trees. Methods Ecology Evolution, 5: 701-707.","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/SSARP-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SSARP: SSARP (Species-/Speciation-Area Relationship Projector) — SSARP-package","title":"SSARP: SSARP (Species-/Speciation-Area Relationship Projector) — SSARP-package","text":"Create Species- Speciation-Area Relationships taxa.","code":""},{"path":[]},{"path":"https://kmartinet.github.io/SSARP/reference/SSARP-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SSARP: SSARP (Species-/Speciation-Area Relationship Projector) — SSARP-package","text":"Maintainer: Kristen Martinet kmartinet@outlook.com","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/create_SAR.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a species-area relationship (SAR) plot — create_SAR","title":"Create a species-area relationship (SAR) plot — create_SAR","text":"Use segmented regression create species-area relationship (SAR) plot. X axis represents log(island area) Y axis represents log(number species)","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/create_SAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a species-area relationship (SAR) plot — create_SAR","text":"","code":"create_SAR(occurrences, npsi = 1)"},{"path":"https://kmartinet.github.io/SSARP/reference/create_SAR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a species-area relationship (SAR) plot — create_SAR","text":"occurrences dataframe output SSARP::find_areas() (using custom dataframe, ensure following columns: Species, areas) npsi maximum number breakpoints estimate model selection.  Default: 1","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/create_SAR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a species-area relationship (SAR) plot — create_SAR","text":"list 3 including: summary output, segmented regression object, aggregated dataframe used create plot","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/create_SAR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a species-area relationship (SAR) plot — create_SAR","text":"","code":"# The GBIF key for the Anolis genus is 8782549 #  Obtained with: key <- get_key(query = \"Anolis\", rank = \"genus\") key <- 8782549 # Read in example dataset obtained through: #  dat <- get_data(key = key, limit = 100) dat <- read.csv(system.file(\"extdata\",                             \"SSARP_Example_Dat.csv\",                             package = \"SSARP\")) land <- find_land(occurrences = dat) areas <- find_areas(occs = land) #> ℹ Recording island names... #> ℹ Assembling island dictionary... #> ℹ Adding areas to final dataframe...  seg <- create_SAR(areas)  summary <- seg[1]"},{"path":"https://kmartinet.github.io/SSARP/reference/create_SpAR.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a speciation-area relationship plot (SpAR) — create_SpAR","title":"Create a speciation-area relationship plot (SpAR) — create_SpAR","text":"Use segmented regression create speciation-area relationship plot. X axis represents log(island area) Y axis represents log(speciation rate)","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/create_SpAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a speciation-area relationship plot (SpAR) — create_SpAR","text":"","code":"create_SpAR(occurrences, npsi = 1)"},{"path":"https://kmartinet.github.io/SSARP/reference/create_SpAR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a speciation-area relationship plot (SpAR) — create_SpAR","text":"occurrences dataframe output one SSARP's speciation methods (SSARP::estimate_BAMM(), SSARP::estimate_DR(), SSARP::estimate_MS()), using custom dataframe, ensure following columns: areas, rate npsi maximum number breakpoints estimate model selection.  Default: 1","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/create_SpAR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a speciation-area relationship plot (SpAR) — create_SpAR","text":"list 3 including: summary output, segmented regression object, aggregated dataframe used create plot","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/create_SpAR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a speciation-area relationship plot (SpAR) — create_SpAR","text":"","code":"if (FALSE) { # \\dontrun{ key <- get_key(query = \"Anolis\", rank = \"genus\") dat <- get_data(key = key, limit = 100) land <- find_land(occurrences = dat) areas <- find_areas(occs = land) occ_speciation <- estimate_BAMM(label_type = \"epithet\",                                   occurrences = areas,                                   edata = edata) seg <- create_SpAR(occurrences = occ_speciation, npsi = 1) summary <- seg[1] } # }"},{"path":"https://kmartinet.github.io/SSARP/reference/estimate_DR.html","id":null,"dir":"Reference","previous_headings":"","what":"Get speciation rates using the DR statistic (Jetz et al. 2012) — estimate_DR","title":"Get speciation rates using the DR statistic (Jetz et al. 2012) — estimate_DR","text":"Use methodology Sun Folk (2020) calculate DR statistic tip given tree output dataframe use SSARP's speciation-area relationship pipeline. method also removes species rows without rates (likely occur tree species included occurrence record dataframe). tree read examples modified Patton et al. (2021).","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/estimate_DR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get speciation rates using the DR statistic (Jetz et al. 2012) — estimate_DR","text":"","code":"estimate_DR(tree, label_type = \"binomial\", occurrences)"},{"path":"https://kmartinet.github.io/SSARP/reference/estimate_DR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get speciation rates using the DR statistic (Jetz et al. 2012) — estimate_DR","text":"tree dated phylogenetic tree corresponds taxa included speciation-area relationship label_type Either \"epithet\" \"binomial\" (default): describes type tip label provided tree. \"epithet,\" species epithet used match speciation rates tips returned occurrence dataframe. \"binomial,\" full species name (including genus) used match speciation rates tips returned occurrence dataframe. occurrences occurrence record dataframe output SSARP pipeline. like use custom dataframe, please make sure columns titled \"Genus\" \"Species\"","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/estimate_DR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get speciation rates using the DR statistic (Jetz et al. 2012) — estimate_DR","text":"dataframe includes speciation rates species occurrence record dataframe","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/estimate_DR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get speciation rates using the DR statistic (Jetz et al. 2012) — estimate_DR","text":"Jetz, W., Thomas, G.H, Joy, J.B., Harmann, K., & Mooers, .O. (2012). global diversity birds space time. Nature, 491: 444-448. Patton, .H., Harmon, L.J., del Rosario Castañeda, M., Frank, H.K., Donihue, C.M., Herrel, ., & Losos, J.B. (2021). adaptive radiations collide: Different evolutionary trajectories within island mainland lizard clades. PNAS, 118(42): e2024451118. Sun, M. & Folk, R.. (2020). Cactusolo/rosid_NCOMMS-19-37964-T: Code data rosid_NCOMMS-19-37964 (Version V.1.0). Zenodo. http://doi.org/10.5281/zenodo.3843441","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/estimate_DR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get speciation rates using the DR statistic (Jetz et al. 2012) — estimate_DR","text":"","code":"# The GBIF key for the Anolis genus is 8782549 #  Obtained with: key <- get_key(query = \"Anolis\", rank = \"genus\") key <- 8782549 # Read in example dataset obtained through: #  dat <- get_data(key = key, limit = 100) dat <- read.csv(system.file(\"extdata\",                             \"SSARP_Example_Dat.csv\",                             package = \"SSARP\")) land <- find_land(occurrences = dat) areas <- find_areas(occs = land) #> ℹ Recording island names... #> ℹ Assembling island dictionary... #> ℹ Adding areas to final dataframe...  # Read tree from Patton et al. (2021), trimmed to Caribbean species tree <- ape::read.tree(system.file(\"extdata\",                                     \"Patton_Anolis_trimmed.tree\",                                     package = \"SSARP\")) #> Warning: empty character string.  occ_speciation <- estimate_DR(tree = tree,                                label_type = \"epithet\",                                occurrences = areas)"},{"path":"https://kmartinet.github.io/SSARP/reference/estimate_MS.html","id":null,"dir":"Reference","previous_headings":"","what":"Get speciation rates following equation 4 in Magallon and Sanderson (2001) — estimate_MS","title":"Get speciation rates following equation 4 in Magallon and Sanderson (2001) — estimate_MS","text":"Use methodology Magallon Sanderson (2001) estimate speciation rates using user-provided phylogeny output dataframe use SSARP's speciation-area relationship pipeline. method also removes species rows without rates (likely occur tree species included occurrence record dataframe)","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/estimate_MS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get speciation rates following equation 4 in Magallon and Sanderson (2001) — estimate_MS","text":"","code":"estimate_MS(tree, label_type = \"binomial\", occurrences)"},{"path":"https://kmartinet.github.io/SSARP/reference/estimate_MS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get speciation rates following equation 4 in Magallon and Sanderson (2001) — estimate_MS","text":"tree dated phylogenetic tree corresponds taxa included speciation-area relationship label_type Either \"epithet\" \"binomial\" (default): describes type tip label provided tree. \"epithet,\" species epithet used interacting tree. \"binomial,\" full species name (including genus) used interacting tree. occurrences occurrence record dataframe output SSARP pipeline. like use custom dataframe, please make sure columns titled \"Genus\", \"Species\", \"areas\"","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/estimate_MS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get speciation rates following equation 4 in Magallon and Sanderson (2001) — estimate_MS","text":"dataframe includes speciation rates island user-provided occurrence record dataframe. #' @references Magallόn, S. & Sanderson, M.J. (2001). Absolute Diversification Rates Angiosperm Clades. Evolution, 55(9): 1762-1780.","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/estimate_MS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get speciation rates following equation 4 in Magallon and Sanderson (2001) — estimate_MS","text":"","code":"# The GBIF key for the Anolis genus is 8782549 #  Obtained with: key <- get_key(query = \"Anolis\", rank = \"genus\") key <- 8782549 # Read in example dataset obtained through: #  dat <- get_data(key = key, limit = 100) dat <- read.csv(system.file(\"extdata\",                             \"SSARP_Example_Dat.csv\",                             package = \"SSARP\")) land <- find_land(occurrences = dat) areas <- find_areas(occs = land) #> ℹ Recording island names... #> ℹ Assembling island dictionary... #> ℹ Adding areas to final dataframe...  # Read tree from Patton et al. (2021), trimmed to Caribbean species tree <- ape::read.tree(system.file(\"extdata\",                                     \"Patton_Anolis_trimmed.tree\",                                     package = \"SSARP\")) #> Warning: empty character string.                                occ_speciation <- estimate_MS(tree = tree,                                label_type = \"epithet\",                                occurrences = areas) #> Error in UseMethod(\"Ntip\"): no applicable method for 'Ntip' applied to an object of class \"NULL\""},{"path":"https://kmartinet.github.io/SSARP/reference/find_areas.html","id":null,"dir":"Reference","previous_headings":"","what":"Find areas of land masses. — find_areas","title":"Find areas of land masses. — find_areas","text":"Reference dataset island names areas find areas land masses relevant taxon interest.","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/find_areas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find areas of land masses. — find_areas","text":"","code":"find_areas(occs, area_custom = NULL)"},{"path":"https://kmartinet.github.io/SSARP/reference/find_areas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find areas of land masses. — find_areas","text":"occs dataframe returned SSARP::find_land(). using custom occurrence record dataframe, ensure following columns order: \"SpeciesName\", \"Genus\", \"Species\", \"Longitude\", \"Latitude\", \"First\", \"Second\", \"Third\", \"datasetKey\". \"datasetKey\" column important GBIF records identifies dataset occurrence record belongs. Custom dataframes without style data organization fill column placeholder values. area_custom dataframe including names land masses associated areas. dataframe provided user like bypass using built-database island names areas. Please ensure custom dataframe includes land mass's area column 3 name column 5. (Optional)","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/find_areas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find areas of land masses. — find_areas","text":"dataframe species name, island name, island area","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/find_areas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find areas of land masses. — find_areas","text":"","code":"# The GBIF key for the Anolis genus is 8782549 #  Obtained with: key <- get_key(query = \"Anolis\", rank = \"genus\") key <- 8782549 # Read in example dataset obtained through: #  dat <- get_data(key = key, limit = 100) dat <- read.csv(system.file(\"extdata\",                             \"SSARP_Example_Dat.csv\",                             package = \"SSARP\")) occs <- find_land(occurrences = dat) areas <- find_areas(occs = occs) #> ℹ Recording island names... #> ℹ Assembling island dictionary... #> ℹ Adding areas to final dataframe..."},{"path":"https://kmartinet.github.io/SSARP/reference/find_land.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the name of the land on which the occurrence points were found — find_land","title":"Find the name of the land on which the occurrence points were found — find_land","text":"Use various mapping tools attempt find names land masses occurrence points found.","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/find_land.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the name of the land on which the occurrence points were found — find_land","text":"","code":"find_land(occurrences, fillgaps = FALSE)"},{"path":"https://kmartinet.github.io/SSARP/reference/find_land.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the name of the land on which the occurrence points were found — find_land","text":"occurrences dataframe output SSARP::get_data() (using custom dataframe, ensure following columns: decimalLongitude, decimalLatitude, acceptedScientificName, genericName, specificEpithet, datasetKey). \"datasetKey\" column important GBIF records identifies dataset occurrence record belongs. Custom dataframes without style data organization fill column placeholder values. fillgaps (logical) Attempt use Photon API fill gaps left mapdata::map.() (TRUE) mapdata::map.() results (FALSE, default). powerful, Photon API standard location island names returned information, using likely require returned dataframe cleaned user.","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/find_land.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the name of the land on which the occurrence points were found — find_land","text":"dataframe species name, longitude, latitude, three parts occurrence information. \"First\" name used describe largest possible area land occurrence point found. \"Second\" name used describe second-largest possible area land corresponds occurrence point. \"Third\" specific area land corresponds occurrence point. Functions later SSARP pipeline default checking whether \"Third\" entry, look \"Second,\" \"First.\"","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/find_land.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the name of the land on which the occurrence points were found — find_land","text":"","code":"# The GBIF key for the Anolis genus is 8782549 #  Obtained with: key <- get_key(query = \"Anolis\", rank = \"genus\") key <- 8782549 # Read in example dataset obtained through: #  dat <- get_data(key = key, limit = 100) dat <- read.csv(system.file(\"extdata\",                             \"SSARP_Example_Dat.csv\",                             package = \"SSARP\")) occs <- find_land(occurrences = dat, fillgaps = FALSE)"},{"path":"https://kmartinet.github.io/SSARP/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get occurrence data from GBIF — get_data","title":"Get occurrence data from GBIF — get_data","text":"Use rgbif retrieve occurrence data GBIF's database given taxon. function return occurrences include GPS coordinates.","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get occurrence data from GBIF — get_data","text":"","code":"get_data(key, limit = 100, geometry = NULL)"},{"path":"https://kmartinet.github.io/SSARP/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get occurrence data from GBIF — get_data","text":"key taxon key taxon interest (can found using SSARP::getKey) limit maximum number occurrence records return. Default: 100. NOTE: hard maximum 100,000 (see information limit rgbif::occ_search()) geometry counter-clockwise winding order well-known text (WKT) representation geometry use rgbif::occ_search() call. parameter restrict returned occurrence records specified geometry. information valid WKT objects can found rgbif::occ_search() vignette.","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get occurrence data from GBIF — get_data","text":"dataframe occurrence records taxon interest","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get occurrence data from GBIF — get_data","text":"","code":"# The GBIF key for the Anolis genus is 8782549 #  Obtained with: key <- get_key(query = \"Anolis\", rank = \"genus\") key <- 8782549 # In order to prevent GBIF API calls when running examples, the example  #  dataset is read here.  # Normally, a user would run: dat <- get_data(key = key, limit = 100) dat <- read.csv(system.file(\"extdata\",                             \"SSARP_Example_Dat.csv\",                             package = \"SSARP\"))  # An example with geometry that restricts returned Anolis data to a box  #  around Florida (Includes some records in Georgia and the Biminis due   #  to the size of the square) # dat <- get_data(key = 8782549,  #              limit = 1000,  #              geometry = 'POLYGON((-87.4 24.3, -79.2 24.3, -79.2 31.1, #              -87.4 31.1, -87.4 24.3))')"},{"path":"https://kmartinet.github.io/SSARP/reference/get_island_areas.html","id":null,"dir":"Reference","previous_headings":"","what":"Access properly encoded island_area object — get_island_areas","title":"Access properly encoded island_area object — get_island_areas","text":"order address R CMD check warning non-ASCII characters island_area object, characters island names converted ASCII format. non-ASCII accents island names important functionality SSARP package, function provides user dataframe including original, un-converted island names.","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/get_island_areas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access properly encoded island_area object — get_island_areas","text":"","code":"get_island_areas()"},{"path":"https://kmartinet.github.io/SSARP/reference/get_island_areas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access properly encoded island_area object — get_island_areas","text":"edited version SSARP::island_areas object, dataframe including names, areas, maximum elevations islands across globe.","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/get_island_areas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access properly encoded island_area object — get_island_areas","text":"","code":"island_df <- get_island_areas()"},{"path":"https://kmartinet.github.io/SSARP/reference/get_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve taxon key from GBIF — get_key","title":"Retrieve taxon key from GBIF — get_key","text":"Use rgbif find best match name given return taxon key","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/get_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve taxon key from GBIF — get_key","text":"","code":"get_key(query, rank)"},{"path":"https://kmartinet.github.io/SSARP/reference/get_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve taxon key from GBIF — get_key","text":"query search parameter pass rgbif::name_suggest() rank taxonimic rank associated search parameter","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/get_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve taxon key from GBIF — get_key","text":"taxon key GBIF needs search database occurrence records","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/get_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve taxon key from GBIF — get_key","text":"","code":"# Each of these examples reflect a different taxonomic rank # Only the first will run with \"Run Examples\" to limit GBIF API calls key <- get_key(query = \"Phelsuma\", rank = \"genus\") if (FALSE) { # \\dontrun{ key <- get_key(query = \"Tamias ruficaudus ruficaudus\", rank = \"subspecies\") key <- get_key(query = \"Naesiotus akamatus\", rank = \"species\") key <- get_key(query = \"Araneae\", rank = \"order\") } # }"},{"path":"https://kmartinet.github.io/SSARP/reference/get_presence_absence.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a presence-absence dataframe for a given occurrence record dataframe — get_presence_absence","title":"Create a presence-absence dataframe for a given occurrence record dataframe — get_presence_absence","text":"Use dataframe output SSARP::find_areas() determine species occur specific islands creating presence-absence dataframe. 1 represents presence 0 represents absence.","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/get_presence_absence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a presence-absence dataframe for a given occurrence record dataframe — get_presence_absence","text":"","code":"get_presence_absence(occs)"},{"path":"https://kmartinet.github.io/SSARP/reference/get_presence_absence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a presence-absence dataframe for a given occurrence record dataframe — get_presence_absence","text":"occs dataframe output SSARP::find_areas(), using custom dataframe, ensure following named columns: \"areas\" containing areas associated land masses interest \"Species\" containing names species living islands 6th column containing locality information. SSARP workflow, column called \"First\" contains country name 7th column containing locality information. SSARP workflow, column called \"Second\" contains province island name 8th column containing locality information. SSARP workflow, column called \"Third\" contains island name 7th column contain island name","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/get_presence_absence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a presence-absence dataframe for a given occurrence record dataframe — get_presence_absence","text":"dataframe row island given occurrence record dataframe column species. Within species column, 1 represents presence species island corresponding given row, 0 represents absence species island corresponding given row.","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/get_presence_absence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a presence-absence dataframe for a given occurrence record dataframe — get_presence_absence","text":"","code":"# The GBIF key for the Anolis genus is 8782549 #  Obtained with: key <- get_key(query = \"Anolis\", rank = \"genus\") key <- 8782549 # Read in example dataset obtained through: #  dat <- get_data(key = key, limit = 100) dat <- read.csv(system.file(\"extdata\",                             \"SSARP_Example_Dat.csv\",                             package = \"SSARP\")) land <- find_land(occurrences = dat) areas <- find_areas(occs = land) #> ℹ Recording island names... #> ℹ Assembling island dictionary... #> ℹ Adding areas to final dataframe... pres_abs <- get_presence_absence(areas)"},{"path":"https://kmartinet.github.io/SSARP/reference/get_sources.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather sources from GBIF data for citation — get_sources","title":"Gather sources from GBIF data for citation — get_sources","text":"using data obtained via SSARP::get_data() filtered SSARP::find_areas() publication, must keep record datasets used analysis. function assists creating dataframe necessary follow GBIF's citation guidelines (see References).","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/get_sources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather sources from GBIF data for citation — get_sources","text":"","code":"get_sources(occs)"},{"path":"https://kmartinet.github.io/SSARP/reference/get_sources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather sources from GBIF data for citation — get_sources","text":"occs occurrence record dataframe returned SSARP::get_data() SSARP::find_areas().","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/get_sources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather sources from GBIF data for citation — get_sources","text":"dataframe dataset keys number occurrence records associated key gathered SSARP::get_data() /filtered SSARP::find_areas().","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/get_sources.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gather sources from GBIF data for citation — get_sources","text":"GBIF citation guidelines Data obtained via SSARP::get_data() filtered SSARP::find_areas() falls derived datasets distinction information creating derived datasets","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/get_sources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gather sources from GBIF data for citation — get_sources","text":"","code":"# The GBIF key for the Anolis genus is 8782549 #  Obtained with: key <- get_key(query = \"Anolis\", rank = \"genus\") key <- 8782549 # Read in example dataset obtained through: #  dat <- get_data(key = key, limit = 100) dat <- read.csv(system.file(\"extdata\",                             \"SSARP_Example_Dat.csv\",                             package = \"SSARP\")) source_df <- get_sources(occs = dat)"},{"path":"https://kmartinet.github.io/SSARP/reference/island_areas.html","id":null,"dir":"Reference","previous_headings":"","what":"Island name data — island_areas","title":"Island name data — island_areas","text":"collection island names, areas, elevations found using ArcGIS","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/island_areas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Island name data — island_areas","text":"","code":"island_areas"},{"path":[]},{"path":"https://kmartinet.github.io/SSARP/reference/island_areas.html","id":"-island-areas-","dir":"Reference","previous_headings":"","what":"'island_areas'","title":"Island name data — island_areas","text":"data frame 26376 rows 5 variables: OBJECTID_1 integer Object ID ArcGIS COUNT integer Number cells within island, ArcGIS AREA double Area island MAX integer Maximum elevation island Name character Name island","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/plot.SAR.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a species-area relationship — plot.SAR","title":"Plot a species-area relationship — plot.SAR","text":"Function plotting species-area relationship objects SSARP::create_SAR() function","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/plot.SAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a species-area relationship — plot.SAR","text":"","code":"# S3 method for class 'SAR' plot(x, ...)"},{"path":"https://kmartinet.github.io/SSARP/reference/plot.SAR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a species-area relationship — plot.SAR","text":"x SAR object plotted ... Functions pass plot()","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/plot.SAR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a species-area relationship — plot.SAR","text":"plot species-area relationship","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/plot.SAR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a species-area relationship — plot.SAR","text":"","code":"# The GBIF key for the Anolis genus is 8782549 #  Obtained with: key <- get_key(query = \"Anolis\", rank = \"genus\") key <- 8782549 # Read in example dataset obtained through: #  dat <- get_data(key = key, limit = 100) dat <- read.csv(system.file(\"extdata\",                             \"SSARP_Example_Dat.csv\",                             package = \"SSARP\")) occs <- find_land(occurrences = dat) areas <- find_areas(occs = occs) #> ℹ Recording island names... #> ℹ Assembling island dictionary... #> ℹ Adding areas to final dataframe... seg <- create_SAR(areas, npsi = 0)  plot(seg)"},{"path":"https://kmartinet.github.io/SSARP/reference/print.SAR.html","id":null,"dir":"Reference","previous_headings":"","what":"Print species-area relationship summary — print.SAR","title":"Print species-area relationship summary — print.SAR","text":"Function printing summary species-area relationship objects SSARP::create_SAR() function","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/print.SAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print species-area relationship summary — print.SAR","text":"","code":"# S3 method for class 'SAR' print(x, printlen = NULL, ...)"},{"path":"https://kmartinet.github.io/SSARP/reference/print.SAR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print species-area relationship summary — print.SAR","text":"x SAR object interest printlen always NULL ... Parameters pass print()","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/print.SAR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print species-area relationship summary — print.SAR","text":"summary species-area relationship","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/print.SAR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print species-area relationship summary — print.SAR","text":"","code":"# The GBIF key for the Anolis genus is 8782549 #  Obtained with: key <- get_key(query = \"Anolis\", rank = \"genus\") key <- 8782549 # Read in example dataset obtained through: #  dat <- get_data(key = key, limit = 100) dat <- read.csv(system.file(\"extdata\",                             \"SSARP_Example_Dat.csv\",                             package = \"SSARP\")) occs <- find_land(occurrences = dat) areas <- find_areas(occs = occs) #> ℹ Recording island names... #> ℹ Assembling island dictionary... #> ℹ Adding areas to final dataframe... seg <- create_SAR(areas, npsi = 0)  print(seg) #>  #> Call: #> stats::lm(formula = y ~ x, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -0.5061 -0.3444 -0.2814  0.2629  1.1428  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept) -2.45955    0.99560  -2.470   0.0331 * #> x            0.14188    0.04864   2.917   0.0154 * #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.5813 on 10 degrees of freedom #> Multiple R-squared:  0.4597,\tAdjusted R-squared:  0.4057  #> F-statistic: 8.509 on 1 and 10 DF,  p-value: 0.01538 #>"},{"path":"https://kmartinet.github.io/SSARP/reference/quick_create_SAR.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly create a species-area relationship — quick_create_SAR","title":"Quickly create a species-area relationship — quick_create_SAR","text":"Use SSARP workflow creating species-area relationship island species using occurrence data GBIF without go every individual step.","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/quick_create_SAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly create a species-area relationship — quick_create_SAR","text":"","code":"quick_create_SAR(   taxon,   rank,   limit = 100,   geometry = NULL,   continent = TRUE,   npsi = 1 )"},{"path":"https://kmartinet.github.io/SSARP/reference/quick_create_SAR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly create a species-area relationship — quick_create_SAR","text":"taxon name taxon interest. rank taxonomic rank associated taxon interest. limit number GBIF occurrence records obtain. geometry (character) polygon written Well Known Text (WKT) format pass SSARP::get_data() function. polygon given, records across globe returned. continent (logical) TRUE, continental areas removed species-area relationship data. FALSE, continental areas removed species-area relationship data. Default: TRUE npsi number breakpoints estimate. Default: 1","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/quick_create_SAR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly create a species-area relationship — quick_create_SAR","text":"list 3 including: summary output, segmented regression object, aggregated dataframe used create plot.","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/quick_create_SAR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly create a species-area relationship — quick_create_SAR","text":"","code":"seg <- quick_create_SAR(taxon = \"Phelsuma\", rank = \"genus\", limit = 100, npsi = 0) #> ℹ Finding taxon key #> ℹ Gathering data #> ℹ Finding land #> ℹ Gathering areas #> ℹ Recording island names... #> ℹ Assembling island dictionary... #> ℹ Adding areas to final dataframe... #> ℹ Removing continental areas"},{"path":"https://kmartinet.github.io/SSARP/reference/remove_continents.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove continents from area dataframe. — remove_continents","title":"Remove continents from area dataframe. — remove_continents","text":"Reference list continental areas remove dataframe output SSARP::find_areas().","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/remove_continents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove continents from area dataframe. — remove_continents","text":"","code":"remove_continents(occs)"},{"path":"https://kmartinet.github.io/SSARP/reference/remove_continents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove continents from area dataframe. — remove_continents","text":"occs dataframe returned SSARP::find_areas(). recommend using custom dataframe function references areas given area database used SSARP::find_areas(). must use custom dataframe, please ensure  landmass areas 9th column dataframe.","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/remove_continents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove continents from area dataframe. — remove_continents","text":"dataframe species name, island name, island area (without continents)","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/remove_continents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove continents from area dataframe. — remove_continents","text":"","code":"# The GBIF key for the Anolis genus is 8782549 #  Obtained with: key <- get_key(query = \"Anolis\", rank = \"genus\") key <- 8782549 # Read in example dataset obtained through: #  dat <- get_data(key = key, limit = 100) dat <- read.csv(system.file(\"extdata\",                             \"SSARP_Example_Dat.csv\",                             package = \"SSARP\")) occs <- find_land(occurrences = dat) areas <- find_areas(occs = occs) #> ℹ Recording island names... #> ℹ Assembling island dictionary... #> ℹ Adding areas to final dataframe... new_areas <- remove_continents(areas)"},{"path":"https://kmartinet.github.io/SSARP/reference/speciationBAMM.html","id":null,"dir":"Reference","previous_headings":"","what":"Get tip speciation rates from BAMM (Rabosky 2014) analysis — speciationBAMM","title":"Get tip speciation rates from BAMM (Rabosky 2014) analysis — speciationBAMM","text":"Use BAMMtools package (Rabosky et al. 2014) extract tip speciation rates user-supplied BAMM analysis objects.","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/speciationBAMM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get tip speciation rates from BAMM (Rabosky 2014) analysis — speciationBAMM","text":"","code":"speciationBAMM(label_type = \"binomial\", occurrences, edata)"},{"path":"https://kmartinet.github.io/SSARP/reference/speciationBAMM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get tip speciation rates from BAMM (Rabosky 2014) analysis — speciationBAMM","text":"label_type Either \"epithet\" \"binomial\" (default): describes type tip label tree used BAMM analysis. \"epithet,\" species epithet used match speciation rates tips returned occurrence dataframe. \"binomial,\" full species name (including genus) used match speciation rates tips returned occurrence dataframe. occurrences occurrence record dataframe output SSARP pipeline. like use custom dataframe, please make sure columns titled \"Genus\" \"Species\" edata eventdata object created using BAMMtools::getEventData() function","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/speciationBAMM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get tip speciation rates from BAMM (Rabosky 2014) analysis — speciationBAMM","text":"dataframe includes speciation rates species occurrence record dataframe","code":""},{"path":"https://kmartinet.github.io/SSARP/reference/speciationBAMM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get tip speciation rates from BAMM (Rabosky 2014) analysis — speciationBAMM","text":"","code":"if (FALSE) { # \\dontrun{ key <- get_key(query = \"Anolis\", rank = \"genus\") dat <- get_data(key = key, limit = 100) land <- find_land(occurrences = dat) areas <- find_areas(occs = land)  # Read tree from Patton et al. (2021), trimmed to Caribbean species tree <- ape::read.tree(system.file(\"extdata\",                               \"Patton_Anolis_trimmed.tree\",                               package = \"SSARP\"))  # Event data file from an external BAMM run event_data <- system.file(\"extdata\",                            \"event_data_Patton_Anolis.txt\",                            package = \"SSARP\") edata <- BAMMtools::getEventData(phy = tree, eventdata = event_data)  occ_speciation <- speciationBAMM(label_type = \"epithet\",                                   occurrences = areas ,                                   edata = edata) } # }"},{"path":[]},{"path":"https://kmartinet.github.io/SSARP/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"SSARP 0.3.0 (2025-07-04)","text":"Changed names functions “verb_object” structure Two new example files added package: Patton_Anolis_Trimmed.tree SSARP_Example_Dat.csv allow users run examples involving phylogenetic tree Anolis GBIF data Anolis, respectively Added “get_presence_absence” function, creates presence-absence matrix given dataframe output SSARP::find_areas()","code":""},{"path":"https://kmartinet.github.io/SSARP/news/index.html","id":"documentation-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION FIXES","title":"SSARP 0.3.0 (2025-07-04)","text":"Function names now pkg::function() notation throughout documentation Vignettes updated reflect new function names example files majority examples now run, instead remaining \\dontrun block 0.2.0","code":""},{"path":"https://kmartinet.github.io/SSARP/news/index.html","id":"other-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"OTHER FIXES","title":"SSARP 0.3.0 (2025-07-04)","text":"@import @importFrom statements removed favor pkg::function() statements across package","code":""},{"path":[]},{"path":"https://kmartinet.github.io/SSARP/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"SSARP 0.2.0 (2025-04-29)","text":"Added NEWS file","code":""},{"path":"https://kmartinet.github.io/SSARP/news/index.html","id":"documentation-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION FIXES","title":"SSARP 0.2.0 (2025-04-29)","text":"Added badge status rOpenSci software peer review README","code":""}]
